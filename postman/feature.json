{
  "info": {
    "_postman_id": "3f4e7377-eec3-40dd-a9cb-ae696885394e",
    "name": "Sprint 18 ExploreWithMe (feature_comments)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "2036415"
  },
  "item": [
    {
      "name": "Comment 1 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "});",
              "pm.test(\"Has user create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, '\"text\" must be \"Comment 1\"').to.eql('Comment 1');",
              "});",
              "pm.test(\"Test comment 'state' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('state');",
              "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"Comment 1\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments?eventId=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update comment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "});",
              "pm.test(\"Has user create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, '\"text\" must be \"Update comment 1\"').to.eql('Update comment 1');",
              "});",
              "pm.test(\"Test comment 'state' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('state');",
              "    pm.expect(jsonData.state, '\"state\" must be \"MODIFIED\"').to.eql('MODIFIED');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"Update comment 1\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Comment 2 create",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
              "});",
              "pm.test(\"Has user create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, '\"text\" must be \"Comment 2\"').to.eql('Comment 2');",
              "});",
              "pm.test(\"Test comment 'state' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('state');",
              "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"Comment 2\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "eventId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Admin update comment 3 - BLOCKED",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);",
              "});",
              "pm.test(\"Has user create response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test comment 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
              "});",
              "pm.test(\"Test comment 'text' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('text');",
              "    pm.expect(jsonData.text, '\"text\" must be \"Comment 2\"').to.eql('Comment 2');",
              "});",
              "pm.test(\"Test comment 'state' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('state');",
              "    pm.expect(jsonData.state, '\"state\" must be \"BLOCKED\"').to.eql('BLOCKED');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"state\": \"BLOCKED\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/admin/comments/2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get event 2 with comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.be.ok;",
              "});",
              "pm.test(\"Has event cet response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test user 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
              "});",
              "pm.test(\"Test event 'comments' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('comments');",
              "    pm.expect(jsonData.comments.length, 'List length must be 2').to.eql(2);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/events/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete comment 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([204]);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/1/comments/1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            },
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get event 2 with comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.be.ok;",
              "});",
              "pm.test(\"Has event get response\", function () {",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "pm.test(\"Test event 'id' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
              "});",
              "pm.test(\"Test event 'comments' field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('comments');",
              "    pm.expect(jsonData.comments.length, 'List length must be 1').to.eql(1);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/events/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}